import java.sql.*;
import java.util.Scanner;

public class ProductCRUD {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database"; // Change this to your DB URL
    private static final String DB_USER = "root"; // Your DB username
    private static final String DB_PASSWORD = "password"; // Your DB password

    // JDBC connection object
    private static Connection conn;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try {
            // Establish connection to the database
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false); // Start transaction handling

            while (true) {
                // Menu-driven options for CRUD operations
                System.out.println("\nChoose an operation:");
                System.out.println("1. Create Product");
                System.out.println("2. Read Product");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Exit");

                int choice = sc.nextInt();
                sc.nextLine(); // Consume newline character after integer input

                switch (choice) {
                    case 1:
                        createProduct(sc);
                        break;
                    case 2:
                        readProduct(sc);
                        break;
                    case 3:
                        updateProduct(sc);
                        break;
                    case 4:
                        deleteProduct(sc);
                        break;
                    case 5:
                        System.out.println("Exiting...");
                        conn.close();
                        return;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            }

        } catch (SQLException e) {
            System.out.println("Database connection error: " + e.getMessage());
        }
    }

    // Create Product
    private static void createProduct(Scanner sc) {
        System.out.println("Enter Product ID:");
        int id = sc.nextInt();
        sc.nextLine(); // Consume newline
        System.out.println("Enter Product Name:");
        String name = sc.nextLine();
        System.out.println("Enter Product Price:");
        double price = sc.nextDouble();
        System.out.println("Enter Product Quantity:");
        int quantity = sc.nextInt();

        try {
            String query = "INSERT INTO Product (ProductID, ProductName, Price, Quantity) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, id);
            stmt.setString(2, name);
            stmt.setDouble(3, price);
            stmt.setInt(4, quantity);
            stmt.executeUpdate();
            conn.commit(); // Commit the transaction
            System.out.println("Product created successfully.");
        } catch (SQLException e) {
            System.out.println("Error creating product: " + e.getMessage());
            try {
                conn.rollback(); // Rollback if error occurs
            } catch (SQLException rollbackEx) {
                System.out.println("Error rolling back transaction: " + rollbackEx.getMessage());
            }
        }
    }

    // Read Product
    private static void readProduct(Scanner sc) {
        System.out.println("Enter Product ID to search:");
        int id = sc.nextInt();

        try {
            String query = "SELECT * FROM Product WHERE ProductID = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                System.out.println("Product ID: " + rs.getInt("ProductID"));
                System.out.println("Product Name: " + rs.getString("ProductName"));
                System.out.println("Price: " + rs.getDouble("Price"));
                System.out.println("Quantity: " + rs.getInt("Quantity"));
            } else {
                System.out.println("Product not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error reading product: " + e.getMessage());
        }
    }

    // Update Product
    private static void updateProduct(Scanner sc) {
        System.out.println("Enter Product ID to update:");
        int id = sc.nextInt();
        sc.nextLine(); // Consume newline
        System.out.println("Enter new Product Name:");
        String name = sc.nextLine();
        System.out.println("Enter new Product Price:");
        double price = sc.nextDouble();
        System.out.println("Enter new Product Quantity:");
        int quantity = sc.nextInt();

        try {
            String query = "UPDATE Product SET ProductName = ?, Price = ?, Quantity = ? WHERE ProductID = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, name);
            stmt.setDouble(2, price);
            stmt.setInt(3, quantity);
            stmt.setInt(4, id);
            int rowsUpdated = stmt.executeUpdate();

            if (rowsUpdated > 0) {
                conn.commit(); // Commit the transaction
                System.out.println("Product updated successfully.");
            } else {
                System.out.println("Product not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error updating product: " + e.getMessage());
            try {
                conn.rollback(); // Rollback if error occurs
            } catch (SQLException rollbackEx) {
                System.out.println("Error rolling back transaction: " + rollbackEx.getMessage());
            }
        }
    }

    // Delete Product
    private static void deleteProduct(Scanner sc) {
        System.out.println("Enter Product ID to delete:");
        int id = sc.nextInt();

        try {
            String query = "DELETE FROM Product WHERE ProductID = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, id);
            int rowsDeleted = stmt.executeUpdate();

            if (rowsDeleted > 0) {
                conn.commit(); // Commit the transaction
                System.out.println("Product deleted successfully.");
            } else {
                System.out.println("Product not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error deleting product: " + e.getMessage());
            try {
                conn.rollback(); // Rollback if error occurs
            } catch (SQLException rollbackEx) {
                System.out.println("Error rolling back transaction: " + rollbackEx.getMessage());
            }
        }
    }
}
